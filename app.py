# -*- coding: utf-8 -*-
"""
Aplicaci√≥n Streamlit - Predicci√≥n de Crecimiento Poblacional en Antioquia
"""

import streamlit as st
import pandas as pd
from data_processor import process_data, get_statistics
from model import run_complete_analysis
from visualization import (
    plot_historical_population, 
    plot_real_vs_predicted, 
    plot_future_predictions,
    plot_error_analysis,
    create_metrics_cards
)

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Predicci√≥n Poblacional Antioquia",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .sub-header {
        font-size: 1.2rem;
        color: #666;
        text-align: center;
        margin-bottom: 3rem;
    }
</style>
""", unsafe_allow_html=True)

def main():
    # T√≠tulo principal
    st.markdown('<h1 class="main-header">üèòÔ∏è Predicci√≥n de Crecimiento Poblacional</h1>', unsafe_allow_html=True)
    st.markdown('<p class="sub-header">An√°lisis predictivo basado en datos hist√≥ricos de Antioquia (1985-2050)</p>', unsafe_allow_html=True)
    
    # Sidebar
    st.sidebar.title("‚öôÔ∏è Configuraci√≥n")
    st.sidebar.markdown("---")
    
    # Cargar y procesar datos
    with st.spinner("Cargando y procesando datos..."):
        df_filtered = process_data()
        
        if df_filtered is None:
            st.error("Error al cargar los datos. Verifica que los archivos Excel est√©n en la carpeta 'data/'")
            return
        
        stats, df_stats = get_statistics(df_filtered)
        analysis_results = run_complete_analysis(df_filtered)
    
    # Opciones de visualizaci√≥n
    st.sidebar.subheader("üìä Visualizaciones")
    show_historical = st.sidebar.checkbox("Evoluci√≥n Hist√≥rica", value=True)
    show_comparison = st.sidebar.checkbox("Real vs Predicci√≥n", value=True)
    show_future = st.sidebar.checkbox("Proyecciones Futuras", value=True)
    show_errors = st.sidebar.checkbox("An√°lisis de Errores", value=False)
    
    # Par√°metros del modelo
    st.sidebar.subheader("üîß Par√°metros del Modelo")
    train_cutoff = st.sidebar.slider("A√±o de corte entrenamiento", 2010, 2020, 2015)
    future_end = st.sidebar.slider("Proyecci√≥n hasta", 2030, 2060, 2050)
    
    # M√©tricas principales
    st.subheader("üìà M√©tricas Principales")
    create_metrics_cards(stats, analysis_results['metrics'])
    
    st.markdown("---")
    
    # Informaci√≥n del dataset
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìã Informaci√≥n del Dataset")
        st.write(f"**Total de registros:** {len(df_filtered):,}")
        st.write(f"**Rango temporal:** {df_stats['A√ëO'].min():.0f} - {df_stats['A√ëO'].max():.0f}")
        st.write(f"**Poblaci√≥n promedio:** {stats['mean']:,.0f} habitantes")
        st.write(f"**Desviaci√≥n est√°ndar:** {stats['std']:,.0f}")
    
    with col2:
        st.subheader("üéØ M√©tricas del Modelo")
        metrics = analysis_results['metrics']
        st.write(f"**R¬≤ (Bondad de ajuste):** {metrics['r2']:.4f}")
        st.write(f"**Error Absoluto Medio:** {metrics['mae']:,.0f} habitantes")
        st.write(f"**Error Cuadr√°tico Medio:** {metrics['rmse']:,.0f} habitantes")
        
        params = analysis_results['model_params']
        st.write(f"**Crecimiento anual estimado:** {params['pendiente']:,.0f} hab/a√±o")
    
    # Visualizaciones
    st.markdown("---")
    
    if show_historical:
        st.subheader("üìä Evoluci√≥n Hist√≥rica de la Poblaci√≥n")
        fig_historical = plot_historical_population(df_stats)
        st.plotly_chart(fig_historical, use_container_width=True)
    
    if show_comparison:
        st.subheader("üîç Comparaci√≥n: Real vs Predicci√≥n (2016-2025)")
        fig_comparison = plot_real_vs_predicted(analysis_results['comparison'])
        st.plotly_chart(fig_comparison, use_container_width=True)
        
        # Tabla de comparaci√≥n
        st.subheader("üìã Tabla de Comparaci√≥n Detallada")
        comparison_display = analysis_results['comparison'].copy()
        comparison_display['TOTAL'] = comparison_display['TOTAL'].apply(lambda x: f"{x:,.0f}")
        comparison_display['PREDICCION'] = comparison_display['PREDICCION'].apply(lambda x: f"{x:,.0f}")
        comparison_display['ERROR_ABSOLUTO'] = comparison_display['ERROR_ABSOLUTO'].apply(lambda x: f"{x:,.0f}")
        comparison_display['ERROR_PORCENTUAL'] = comparison_display['ERROR_PORCENTUAL'].apply(lambda x: f"{x:.2f}%")
        
        st.dataframe(
            comparison_display[['A√ëO', 'TOTAL', 'PREDICCION', 'ERROR_ABSOLUTO', 'ERROR_PORCENTUAL']],
            use_container_width=True
        )
    
    if show_future:
        st.subheader("üîÆ Proyecciones Futuras (2026-2050)")
        fig_future = plot_future_predictions(analysis_results['df_model'], analysis_results['future_predictions'])
        st.plotly_chart(fig_future, use_container_width=True)
        
        # Tabla de proyecciones
        st.subheader("üìã Tabla de Proyecciones")
        future_display = analysis_results['future_predictions'].copy()
        future_display['PREDICCION_TOTAL'] = future_display['PREDICCION_TOTAL'].apply(lambda x: f"{x:,.0f}")
        
        # Mostrar por quinquenios
        quinquenios = future_display[future_display['A√ëO'] % 5 == 0]
        st.dataframe(quinquenios, use_container_width=True)
    
    if show_errors:
        st.subheader("‚ùå An√°lisis de Errores del Modelo")
        fig_errors = plot_error_analysis(analysis_results['comparison'])
        st.plotly_chart(fig_errors, use_container_width=True)
    
    # Informaci√≥n adicional
    st.markdown("---")
    st.subheader("‚ÑπÔ∏è Informaci√≥n del Proyecto")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.info("""
        **üìä Fuente de Datos**
        - DANE (Departamento Administrativo Nacional de Estad√≠stica)
        - Proyecciones poblacionales oficiales
        - Per√≠odo: 1985-2050
        """)
    
    with col2:
        st.info("""
        **ü§ñ Metodolog√≠a**
        - Regresi√≥n lineal simple
        - Validaci√≥n temporal (train/test)
        - M√©tricas: MAE, MSE, R¬≤
        """)
    
    with col3:
        st.info("""
        **üéØ Aplicaciones**
        - Planificaci√≥n urbana
        - Pol√≠ticas p√∫blicas
        - Proyecci√≥n de servicios
        """)

if __name__ == "__main__":
    main()
